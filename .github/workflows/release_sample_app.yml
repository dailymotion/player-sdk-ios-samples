name: Release new Sample App version
run-name: üöÄ TestAPP ${{ github.actor }} started a new ${{ inputs.version_bump_Type }} release in ${{ inputs.channel_type }} channel

on:
  workflow_dispatch:
    inputs:
      channel_type:
        description: 'Choose Release channel'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - alpha
      version_bump_Type:
        description: 'Type of Version Number Bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release-new-sample-app-version:
    runs-on: macos-13

    if: always() && !cancelled() && !contains(needs.*.result, 'failure')

    steps:
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout main repo
        uses: actions/checkout@v3
        with:
          path: main
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup ENV VARS
        run: echo "CI_MAIN_REPO_PATH=$GITHUB_WORKSPACE/main" >> $GITHUB_ENV

      - name: Install Apple certificates and provisioning profiles
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.SAMPLE_APP_ENTERPRISE_CERT }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          PROD_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROD_BUILD_PROVISION_PROFILE_BASE64 }}
          ALPHA_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.ALPHA_BUILD_PROVISION_PROFILE_BASE64 }}
          BETA_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BETA_BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          PROD_PP_PATH=$RUNNER_TEMP/Dailymotion_Sample_InHouse.mobileprovision
          BETA_PATH=$RUNNER_TEMP/Dailymotion_Sample_InHouse_Beta.mobileprovision
          ALPHA_PATH=$RUNNER_TEMP/Dailymotion_Sample_InHouse_Alpha.mobileprovision

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROD_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PROD_PP_PATH
          echo -n "$BETA_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $BETA_PATH
          echo -n "$ALPHA_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $ALPHA_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROD_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $BETA_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $ALPHA_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Set up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.3
          bundler-cache: true

      - name: Configure environment
        run: |
          chmod +x ./main/ci_scripts/config_env.sh
          ./main/ci_scripts/config_env.sh
        shell: bash

      - name: Build Sample App Release
        run: |
          cd "${CI_MAIN_REPO_PATH}"

          env="alpha"
          target="Alpha"

          case ${{ inputs.channel_type }} in
            stable)
              env="prod" ; target="Prod"
              ;;
            beta)
              env="beta" ; target="Beta"
              ;;
            alpha)
              env="alpha" ; target="Alpha"
              ;;
            *)
              echo "Unknown release channel_type" ; exit 1
              ;;
          esac

          echo "ENV: $env, Target: $target"

          bundle exec fastlane ios SAMPLE_APP_CREATE_RELEASE target:$target bump_type:${{ inputs.version_bump_Type }} --env $env --verbose
          bundle exec fastlane ios TEST_APP_GIT_TAG target:$target --verbose

      - name: List IPA files to verify build output
        run: |
          echo "Looking for .ipa files inside the main directory and its subdirectories..."
          find ./main -type f -name "*.ipa" -print

          echo "Listing contents of ./main/build (if it exists):"
          ls -l ./main/build || echo "./main/build directory does not exist"

      - name: Upload IPA to Bitrise
        env:
          BITRISE_AUTH_TOKEN: ${{ secrets.BITRISE_AUTH_TOKEN }}
          BITRISE_APP_ID: ${{ secrets.BITRISE_APP_ID }}
        run: |
          IPA_PATH="./main/build/SampleApp.ipa"

          if [ ! -f "$IPA_PATH" ]; then
            echo "‚ùå IPA file not found at $IPA_PATH"
            exit 1
          fi

          echo "üì¶ IPA found at $IPA_PATH, uploading to Bitrise..."

          chmod +x ./main/ci_scripts/upload_to_bitrise.sh

          export ARTIFACT_PATH="$IPA_PATH"
          export AUTHORIZATION_TOKEN="$BITRISE_AUTH_TOKEN"
          export CONNECTED_APP_ID="$BITRISE_APP_ID"

          ./main/ci_scripts/upload_to_bitrise.sh
